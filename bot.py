from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, filters
import configparser
import json

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON-—Ñ–∞–π–ª–æ–≤
def load_routes_data():
    with open('bot_db.json', 'r', encoding='utf-8') as file:
        return json.load(file)

def load_comments_data():
    try:
        with open('comments_db.json', 'r', encoding='utf-8') as file:
            return json.load(file)
    except FileNotFoundError:
        return {}  # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å

def save_comments_data(comments_data):
    with open('comments_db.json', 'w', encoding='utf-8') as file:
        json.dump(comments_data, file, ensure_ascii=False, indent=4)

# –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = configparser.ConfigParser()
config.read('settings.ini')
tgramm_token = config['TOKEN']['token']

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–∞—Ö –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
routes_data = load_routes_data()
comments_data = load_comments_data()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
async def update_keyboard(context: CallbackContext) -> None:
    job = context.job
    chat_id = job.chat_id

    # –ü–æ–ª—É—á–∞–µ–º user_data –∏–∑ job.data
    user_data = job.data
    if not user_data:
        print("user_data –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ –∑–∞–¥–∞—á—É")
        return

    # –ü–æ–ª—É—á–∞–µ–º message_id –∏–∑ user_data
    message_id = user_data.get('message_id')
    if not message_id:
        print("message_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ user_data")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='update')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    try:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="üïí –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.",
            reply_markup=reply_markup
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext) -> None:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è user_data, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not hasattr(context, 'user_data') or context.user_data is None:
        context.user_data = {}

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if 'message_id' in context.user_data:
        try:
            await context.bot.delete_message(
                chat_id=update.message.chat_id if update.message else update.callback_query.message.chat_id,
                message_id=context.user_data['message_id']
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    days = list(routes_data.keys())  # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    keyboard = [days[i:i + 3] for i in range(0, len(days), 3)]
    keyboard = [[InlineKeyboardButton(day, callback_data=day) for day in row] for row in keyboard]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        message = await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=reply_markup)
    else:
        message = await update.callback_query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=reply_markup)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    context.user_data['message_id'] = message.message_id

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
    if context.job_queue is not None:
        chat_id = update.message.chat_id if update.message else update.callback_query.message.chat_id
        # –ü–µ—Ä–µ–¥–∞–µ–º user_data –≤ –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ context.job.data
        context.job_queue.run_once(
            update_keyboard,  # –¢–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –∏ –æ—à–∏–±–∫–∏ –Ω–µ –±—É–¥–µ—Ç
            300,  # 300 —Å–µ–∫—É–Ω–¥ = 5 –º–∏–Ω—É—Ç
            chat_id=chat_id,
            data=context.user_data  # –ü–µ—Ä–µ–¥–∞–µ–º user_data —á–µ—Ä–µ–∑ data
        )
    else:
        print("Job queue is not available.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /comment
async def comment(update: Update, context: CallbackContext) -> None:
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /comment <–∞–¥—Ä–µ—Å> <–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π>")
        return

    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /comment <–∞–¥—Ä–µ—Å> <–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π>")
        return

    address = context.args[0]
    comment_text = ' '.join(context.args[1:])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    comments_data[address] = comment_text
    save_comments_data(comments_data)

    await update.message.reply_text(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∞–¥—Ä–µ—Å–∞ '{address}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
async def button_click(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == 'update':
        await start(update, context)
    elif query.data == 'back':
        if 'prev_step' in context.user_data:
            prev_step = context.user_data['prev_step']
            if prev_step == 'day_selection':
                days = list(routes_data.keys())  # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                keyboard = [days[i:i + 3] for i in range(0, len(days), 3)]
                keyboard = [[InlineKeyboardButton(day, callback_data=day) for day in row] for row in keyboard]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=reply_markup)
                context.user_data['prev_step'] = None
            elif prev_step == 'route_selection':
                day = context.user_data.get('selected_day')
                if day in routes_data:
                    routes = list(routes_data[day].keys())
                    # –†–∞–∑–±–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 2 –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
                    keyboard = [routes[i:i + 3] for i in range(0, len(routes), 3)]
                    keyboard = [[InlineKeyboardButton(route, callback_data=f"{day}_{route}") for route in row] for row in keyboard]
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–û—Ç–º–µ–Ω–∞" –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
                    keyboard.append([
                        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back'),
                        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')
                    ])
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.edit_message_text(text=f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è {day}:", reply_markup=reply_markup)
                    context.user_data['prev_step'] = 'day_selection'
        else:
            await query.edit_message_text(text="‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    elif query.data == 'cancel':
        await query.edit_message_text(text="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    elif query.data.startswith('address_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∞–¥—Ä–µ—Å
        address = query.data.replace('address_', '')
        comment = comments_data.get(address, None)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []

        # –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
        if comment:
            text = f"üìç –ê–¥—Ä–µ—Å: {address}\n\nüí¨  {comment}"
        else:
            # –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å
            text = f"üìç –ê–¥—Ä–µ—Å: {address}\n\nüí¨  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
            keyboard.append([InlineKeyboardButton("üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"add_comment_{address}")])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –ø–æ–¥ –∫–Ω–æ–ø–∫–æ–π "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup
        )
    elif query.data.startswith('add_comment_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
        address = query.data.replace('add_comment_', '')
        context.user_data['address_for_comment'] = address

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"address_{address}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ message_id
        message = await query.edit_message_text(
            text=f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∞–¥—Ä–µ—Å–∞ '{address}':",
            reply_markup=reply_markup
        )
        context.user_data['comment_request_message_id'] = message.message_id
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        context.user_data['waiting_for_comment'] = True
    else:
        if '_' in query.data:
            day, route = query.data.split('_', maxsplit=1)
            if day in routes_data and route in routes_data[day]:
                addresses = routes_data[day][route]
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                response = f"üìç –ê–¥—Ä–µ—Å–∞ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ '{route}' ({day}):\n\n"
                keyboard = []
                for address in addresses:
                    # –ö–∞–∂–¥—ã–π –∞–¥—Ä–µ—Å ‚Äî —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞
                    keyboard.append([InlineKeyboardButton(address, callback_data=f"address_{address}")])
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–û—Ç–º–µ–Ω–∞"
                keyboard.append([
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back'),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')
                ])
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(text=response, reply_markup=reply_markup)
                context.user_data['prev_step'] = 'route_selection'
                context.user_data['selected_day'] = day
            else:
                await query.edit_message_text(text="‚ùå –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            day = query.data
            if day in routes_data:
                routes = list(routes_data[day].keys())
                # –†–∞–∑–±–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 2 –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
                keyboard = [routes[i:i + 3] for i in range(0, len(routes), 3)]
                keyboard = [[InlineKeyboardButton(route, callback_data=f"{day}_{route}") for route in row] for row in keyboard]
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–û—Ç–º–µ–Ω–∞" –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
                keyboard.append([
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back'),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')
                ])
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(text=f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è {day}:", reply_markup=reply_markup)
                context.user_data['prev_step'] = 'day_selection'
                context.user_data['selected_day'] = day
            else:
                await query.edit_message_text(text="‚ùå –î–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)
async def handle_message(update: Update, context: CallbackContext) -> None:
    if context.user_data.get('waiting_for_comment'):
        address = context.user_data.get('address_for_comment')
        comment_text = update.message.text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        comments_data[address] = comment_text
        save_comments_data(comments_data)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        if 'comment_request_message_id' in context.user_data:
            try:
                await context.bot.delete_message(
                    chat_id=update.message.chat_id,
                    message_id=context.user_data['comment_request_message_id']
                )
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
        try:
            await context.bot.delete_message(
                chat_id=update.message.chat_id,
                message_id=update.message.message_id
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"address_{address}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∞–¥—Ä–µ—Å–∞ '{address}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.",
            reply_markup=reply_markup
        )
        context.user_data['waiting_for_comment'] = False
        context.user_data['address_for_comment'] = None
        context.user_data['comment_request_message_id'] = None

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    application = Application.builder().token(tgramm_token).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('comment', comment))
    application.add_handler(CallbackQueryHandler(button_click))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()

if __name__ == '__main__':
    main()